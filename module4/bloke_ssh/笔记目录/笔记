1、argparse模块，action='store_const', const=True 常量，选项不需要值，指定选项之后，值为bool类型
2、GIL锁，是CPython解释器引入的，不是python独有的特性，Python完全可以脱离GIL
    用处：保证多线程执行时，数据的完整性、一致性和状态同步
    弊端：> GIL时全局解释器锁，这种模式在只有一个CPU核心的情况下毫无问题。
        任何一个线程被唤起时都能成功获得到GIL（因为只有释放了GIL才会引发线程调度）。
        但当CPU有多个核心的时候，问题就来了。从release GIL到acquire GIL之间几乎是没有间隙的。
        所以当其他在其他核心上的线程被唤醒时，大部分情况下主线程已经又再一次获取到GIL了。
        这个时候被唤醒执行的线程只能白白的浪费CPU时间，看着另一个线程拿着GIL欢快的执行着。
        然后达到切换时间后进入待调度状态，再被唤醒，再等待，以此往复恶性循环。
    替代：不用CPython解释器；用多进程替代多线程
    注意：如果程序是IO密集型，则使用多线程；如果是并行计算要求性能的程序，使用多进程。
